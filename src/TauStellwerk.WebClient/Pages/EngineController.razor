@using JetBrains.Annotations
@using TauStellwerk.Client.Services
@using System.Formats.Asn1
@using TauStellwerk.Base.Model
@using TauStellwerk.Client.Model
@using TauStellwerk.WebClient.Pages
@using System.ComponentModel

@inject AppState AppState
@inject EngineService EngineService;

<div class="box is-engine-controller has-shadow">
    <div class="ec-grid-header is-flex-horizontal align-baseline">
        <span>@Engine.Name</span>
        <span class="flex-filler"></span>
        <button class="bold button-secondary" @onclick="RemoveEngine">X</button>
    </div>
    <EnginePicture Class="ec-grid-image" Images="Engine.Images" Sizes="Sizes"/>
    <label class="ec-grid-slider has-100percent-height">
        <!-- orient="vertical" is for firefox -->
        <input type="range" orient="vertical" min="0" max="126" value="@Engine.Throttle" @oninput="SetSpeed" />
    </label>
    <div class="ec-grid-direction center">
        <button class="bold" disabled="@(Engine.Direction == Direction.Backwards)" @onclick="ChangeDirection">&lt;</button>
        <button class="bold" disabled="@(Engine.Direction == Direction.Forwards)" @onclick="ChangeDirection" >&gt;</button>
    </div>
    <output class="ec-grid-speed center">@Engine.Throttle</output>
    <div class="ec-grid-functions can-scroll-y has-100percent-max-height">
        @foreach (var function in Engine.Functions.OrderBy(e => e.Number))
        {
            <FunctionButton
                Engine=Engine
                Function=function
                />
        }
    </div>
    <div class="ec-grid-estop center">
        <button class="bold estop-button" @onclick="EStop" title="Emergency stop this activeEngine.">Emergency Stop</button>
    </div>
</div>

@code {
    private const string Sizes = "(min-width: 769px) 50vw,(min-width: 1216px) 25vw,(min-width: 1408px) 20vw,100vw";

    [Parameter]
    public EngineFull Engine { get; init; } = null!;

    private void ChangeDirection()
    {
        if (Engine.Direction == Direction.Forwards)
        {
            _ = EngineService.SetSpeed(Engine, 0, Direction.Backwards);
        }
        else
        {
            _ = EngineService.SetSpeed(Engine, 0, Direction.Forwards);
        }
    }

    private void EStop()
    {
        _ = EngineService.SetEStop(Engine);
    }

    private void RemoveEngine()
    {
        AppState.ActiveEngines.Remove(Engine);
        _ = EngineService.ReleaseEngine(Engine.Id);
    }

    private void SetSpeed(ChangeEventArgs obj)
    {
        var throttle = int.Parse(obj.Value as string ?? throw new InvalidOperationException());
        _ = EngineService.SetSpeed(Engine, throttle, Engine.Direction);
    }

}

@using System.ComponentModel
@using TauStellwerk.Base
@using TauStellwerk.Client.Model
@using TauStellwerk.Client.Services
@using TauStellwerk.Util
@using System.Collections.Immutable

@inject ModalManager ModalManager
@inject EngineService EngineService
@inject AppState AppState

@implements IDisposable

<div id="EngineSelectionModal" class="modal @(ModalManager.IsEngineSelectionVisible ? "active-modal" : "inactive-modal")">
    <div class="modal-content-fullwidth">
        <div class="modal-header">
            <input type="text" @bind="_currentSearch" @bind:event="oninput" @bind:after="ListParameterChanged" placeholder="search" />
            <select @onchange="SortingChanged">
                @foreach (var sortingOption in Enum.GetValues<SortEnginesBy>())
                {
                    <option value="@sortingOption">@sortingOption</option>
                }
            </select>
            <select @onchange="SortingDirectionChanged">
                <option>DESC</option>
                <option>ASC</option>
            </select>
            <input id="ShowHiddenCheckbox" type="checkbox" @bind="_showHidden" @bind:after="ListParameterChanged" />
            <label>Show Hidden</label>
            <span class="flex-filler"></span>
            <button class="bold button-secondary" @onclick="() => ModalManager.IsEngineSelectionVisible = false">X</button>
        </div>
        <div class="can-scroll-y modal-body">
            <div id="EngineSelectionContainer" class="selection-grid">
                @foreach (var engine in _engines)
                {
                    <SelectionEngine Engine="engine" SetSearchAction="SetSearch" />
                }
            </div>
        </div>
        <div class="modal-footer">
            <button class="bold" disabled="@CannotMoveBackward" @onclick="() => {_ = ChangePage(-1);}">&lt;</button>
            <output>@_currentPage</output>
            <button class="bold" disabled="@CannotMoveForward" @onclick="() => {_ = ChangePage(+1);}">&gt;</button>
            <span class="flex-filler"></span>
            <button class="button-secondary" @onclick="CreateNewEngine">Create New</button>
        </div>
    </div>
</div>
@code {

    private static readonly int EnginesPerPage = 20;
    
    private readonly List<EngineOverview> _engines = new();
    private readonly object _collectionLock = new();

    private bool CannotMoveForward => _engines.Count != EnginesPerPage;
    private bool CannotMoveBackward => _currentPage <= 1;

    private int _currentPage = 1;

    private string _currentSearch = string.Empty;
    private string _currentSorting = "LastUsed";
    private bool _isSortedDescending = true;
    private bool _showHidden = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ModalManager.PropertyChanged += HandleModalManagerNotification;
        EngineService.EngineChanged += OnEngineChanged;
    }

    private void OnEngineChanged(object? sender, EngineFull e)
    {
        lock (_collectionLock)
        {
            for (var i = 0; i < _engines.Count; i++)
            {
                if (_engines[i].Id == e.Id)
                {
                    _engines[i] = e;
                    StateHasChanged();
                    return;
                }
            }
        }
    }

    public void Dispose()
    {
        EngineService.EngineChanged -= OnEngineChanged;
    }

    private async void HandleModalManagerNotification(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName != nameof(ModalManager.IsEngineSelectionVisible))
        {
            return;
        }

        _engines.Clear();

        if (ModalManager.IsEngineSelectionVisible)
        {
            _currentPage = 1;
            await ChangePage(0);
        }

        StateHasChanged();
    }

    private async void SortingChanged(ChangeEventArgs eventArgs)
    {
        _currentSorting = eventArgs.Value as string ?? throw new ArgumentException("Value shouldn't be null", nameof(eventArgs));
        await ChangePage(int.MinValue);
    }

    private async void SortingDirectionChanged(ChangeEventArgs eventArgs)
    {
        var optionValue = eventArgs.Value as string;
        _isSortedDescending = optionValue == "DESC";
        await ChangePage(int.MinValue);
    }

    private async void ListParameterChanged()
    {
        await ChangePage(int.MinValue);
    }

    private async Task ChangePage(int change)
    {
        _currentPage += change;

        _currentPage = _currentPage.Clamp(1, int.MaxValue);
        _ = Enum.TryParse<SortEnginesBy>(_currentSorting, true, out var sortEnum);
        var engines = await EngineService.GetEngines(
            _currentSearch,
            _currentPage - 1,
            sortEnum,
            _isSortedDescending,
            _showHidden);

        lock (_collectionLock)
        {
            _engines.Clear();
            _engines.AddRange(engines);
        }
        
        StateHasChanged();
    }

    private void CreateNewEngine()
    {
        var engine = new EngineFull();
        AppState.SelectedEngine = engine;
        ModalManager.IsEngineEditModalVisible = true;
    }

    private async void SetSearch(string searchTerm)
    {
        _currentSearch = searchTerm;
        StateHasChanged();
        await ChangePage(int.MinValue);
    }

}

@using System.ComponentModel
@using TauStellwerk.Base
@using TauStellwerk.Client.Model
@using TauStellwerk.Client.Services
@using TauStellwerk.Util

@inject ModalManager ModalManager
@inject EngineService EngineService
@inject AppState AppState

<div id="EngineSelectionModal" class="modal @(ModalManager.IsEngineSelectionVisible ? "active-modal" : "inactive-modal")">
    <div class="modal-content-fullwidth">
        <div class="modal-header">
            <select @onchange="SortingChanged">
                @foreach (var sortingOption in Enum.GetValues<SortEnginesBy>())
                {
                    <option value="@sortingOption">@sortingOption</option>
                }
            </select>
            <select @onchange="SortingDirectionChanged">
                <option>DESC</option>
                <option>ASC</option>
            </select>
            <input id="ShowHiddenCheckbox" type="checkbox" @onchange="ShowHiddenCheckboxChanged" />
            <label>Show Hidden</label>
            <span class="flex-filler" />
            <button class="bold button-secondary" @onclick="() => ModalManager.IsEngineSelectionVisible = false">X</button>
        </div>
        <div class="can-scroll-y modal-body">
            <div id="EngineSelectionContainer" class="selection-grid">
                @foreach (var engine in _engines)
                {
                    <SelectionEngine Engine="engine"/>
                }
            </div>
        </div>
        <div class="modal-footer">
            <button class="bold" disabled="@CannotMoveBackward" @onclick="() => {_ = ChangePage(-1);}">&lt;</button>
            <output>@_currentPage</output>
            <button class="bold" disabled="@CannotMoveForward" @onclick="() => {_ = ChangePage(+1);}">&gt;</button>
            <span class="flex-filler"></span>
            <button class="button-secondary" @onclick="CreateNewEngine">Create New</button>
        </div>
    </div>
</div>
@code {

    private static readonly int EnginesPerPage = 20;
    
    private readonly List<EngineOverview> _engines = new();

    private bool CannotMoveForward => _engines.Count != EnginesPerPage;
    private bool CannotMoveBackward => _currentPage <= 0;

    private int _currentPage = 0;

    private string _currentSorting = "LastUsed";
    private bool _isSortedDescending = true;
    private bool _showHidden = false;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        ModalManager.PropertyChanged += HandleModalManagerNotification;
    }

    private async void HandleModalManagerNotification(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName != nameof(ModalManager.IsEngineSelectionVisible))
        {
            return;
        }

        _engines.Clear();

        if (ModalManager.IsEngineSelectionVisible)
        {
            _currentPage = 0;
            await ChangePage(0);
        }

        StateHasChanged();
    }

    private async void SortingChanged(ChangeEventArgs eventArgs)
    {
        _currentSorting = eventArgs.Value as string ?? throw new ArgumentException("Value shouldn't be null", nameof(eventArgs));
        await ChangePage(int.MinValue);
    }

    private async void SortingDirectionChanged(ChangeEventArgs eventArgs)
    {
        var optionValue = eventArgs.Value as string;
        _isSortedDescending = optionValue == "DESC";
        await ChangePage(int.MinValue);
    }

    private async void ShowHiddenCheckboxChanged(ChangeEventArgs eventArgs)
    {
        var checkboxValue = eventArgs.Value as bool?;
        _showHidden = checkboxValue ?? false;
        await ChangePage(int.MinValue);
    }

    private async Task ChangePage(int change)
    {
        _currentPage += change;
        _engines.Clear();

        _currentPage = _currentPage.Clamp();
        _ = Enum.TryParse<SortEnginesBy>(_currentSorting, true, out var sortEnum);
        var engines = await EngineService.GetEngines(
            _currentPage,
            sortEnum,
            _isSortedDescending,
            _showHidden);

        
        _engines.AddRange(engines);
        StateHasChanged();
    }

    private void CreateNewEngine()
    {
        var engine = new EngineFull();
        AppState.SelectedEngine = engine;
        ModalManager.IsEngineEditModalVisible = true;
    }
}

@using System.ComponentModel
@using System.Reflection.Metadata.Ecma335
@using TauStellwerk.Client.Model
@using TauStellwerk.Client.Services

@inject ModalManager ModalManager
@inject AppState AppState
@inject EngineService EngineService
@inject ISettingsService SettingsService
@inject IJSRuntime JsRuntime

<div class="modal @(ModalManager.IsEngineEditModalVisible ? "active-modal" : "inactive-modal")">
    <div class="modal-content" id="EngineEditModalContent">
        <EditForm Model="Engine">
            <div class="form-group" title="Name of the engine">
                <label for="NameInput">Name: </label>
                <input type="text" id="NameInput" @bind="@AppState.SelectedEngine.Name" />
            </div>
            <div class="form-group" title="DCC Address of the engine">
                <label for="AddressInput">Address: </label>
                <input type="number" id="AddressInput" @bind="@Engine.Address" />
            </div>
            <div class="form-group" title="Top speed of the engine">
                <label for="SpeedInput">Top speed: </label>
                <input type="number" min="0" id="SpeedInput" step="5" @bind="@Engine.TopSpeed" />
            </div>
            <div class="form-group" title="Top speed of the engine">
                <label for="HiddenSwitch">Hidden: </label>
                <input type="checkbox" id="HiddenSwitch" @bind="@Engine.IsHidden" />
            </div>
            <div class="form-group">
                <label>Image: </label>
                <input type="file" form="imageForm" id="ImageSelectionInput" name="image" accept="image/png,image/jpeg,image/webp,image/avif,image/gif,image/bmp"  />
            </div>
            <div class="form-group">
                <label>Tags: </label>
                <div class="tags">
                    @foreach (var tag in Engine.Tags)
                    {
                        <span class="button-secondary is-clickable"
                              title="Remove this tag"
                              @onclick="() => RemoveTag(tag)">@tag X</span>
                    }
                </div>
                <div>
                    <input type="text" @bind="NewTagInput" placeholder="New tag" />
                    <button @onclick="AddTag">Add Tag</button>
                </div>
            </div>
            <div class="form-group">
                <label>Functions: </label>
                <div class="function-container">
                    @if (Engine.Functions.Any())
                    {
                        @foreach (var function in Engine.Functions)
                        {
                            <label for="@($"function{function.Number}")">@($"F{function.Number}")</label>
                            <input type=text @bind="@function.Name" placeholder="Unnamed" id="@($"function{function.Number}")" />
                            <div class="is-flex-horizontal function-duration" title="How long the function takes to complete. Use zero for latching functions.">
                                <label for="@($"function{function.Number}duration")">  Duration:</label>
                                <input type="number" step="100" min="0" @bind="function.Duration" id="@($"function{function.Number}duration")" />
                                <span>ms</span>
                            </div>

                        }
                    }
                    else
                    {
                        <i class="function-placeholder">No functions defined</i>
                    }

                </div>
                <div class="is-flex-horizontal">
                    <button @onclick="RemoveFunction">Remove Function</button>
                    <button @onclick="AddFunction">Add Function</button>
                </div>
            </div>
            <div class="modal-footer">
                <button @onclick="Delete" class="button-secondary">Delete</button>
                <button @onclick="Copy" class="button-secondary" title="Create a new engine based on this engine.">Copy</button>
                <span class="flex-filler"></span>
                <button @onclick="Close" class="button-secondary">Cancel</button>
                <button @onclick="Save">Save</button>
            </div>
        </EditForm>
        <!-- Dirty little workaround to post the image file without having to get it across the js/c# boundary -->
        <form Id="imageForm" action="@_imageUploadPath" method="post"></form>
    </div>
</div>
@code {
    private EngineFull Engine => AppState.SelectedEngine;

    private string NewTagInput { get; set; } = string.Empty;

    private bool IsCopy { get; set; }

    private string _imageUploadPath = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ModalManager.PropertyChanged += HandleModalManagerNotification;
    }

    private void HandleModalManagerNotification(object? sender, PropertyChangedEventArgs args)
    {
        if (args.PropertyName != nameof(ModalManager.IsEngineEditModalVisible))
        {
            return;
        }

        NewTagInput = string.Empty;
        StateHasChanged();
    }

    private async void Close()
    {
        await EngineService.ReleaseEngine(Engine.Id);
        IsCopy = false;

        ModalManager.IsEngineEditModalVisible = false;
    }

    private async Task Save()
    {
        await EngineService.AddOrUpdateEngine(Engine);

        var settings = await SettingsService.GetSettings();

        _imageUploadPath = Path.Combine(settings.ServerAddress, $"upload/{Engine.Id}");

        await JsRuntime.InvokeVoidAsync("postImageFormData", Path.Combine(settings.ServerAddress, $"upload/{Engine.Id}"));
        await EngineService.ReleaseEngine(Engine.Id);
        IsCopy = false;

        ModalManager.IsEngineEditModalVisible = false;
    }

    private async Task Delete()
    {
        var result = await EngineService.TryDeleteEngine(Engine);
        if (result.Success)
        {
            ModalManager.IsEngineEditModalVisible = false;
        }
        else
        {
            AppState.MessageBoxText = $"Failed to delete engine: {result.Error}";
            ModalManager.IsMessageBoxVisible = true;
        }

    }

    private async Task Copy()
    {
        if (IsCopy)
        {
            AppState.ShowMessageBox("The current engine is a copy already - save this engine before creating another copy ");
        }
        else
        {
            await EngineService.ReleaseEngine(Engine.Id);
            AppState.SelectedEngine = Engine.CreateCopy();
            IsCopy = true;
            await JsRuntime.InvokeVoidAsync("resetEngineEditModalScroll");
        }
    }

    private void RemoveTag(string tag)
    {
        Engine.Tags.Remove(tag);
    }

    private void AddTag()
    {
        if (!string.IsNullOrEmpty(NewTagInput))
        {
            Engine.Tags.Add(NewTagInput);
        }
        NewTagInput = string.Empty;
    }

    private void AddFunction()
    {
        byte functionNumber = (byte)(Engine.Functions.LastOrDefault()?.Number + 1 ?? 0);
        Engine.Functions.Add(new Function(functionNumber, string.Empty, 0));
    }

    private void RemoveFunction()
    {
        if (Engine.Functions.Count == 0)
        {
            return;
        }
        Engine.Functions.RemoveAt(Engine.Functions.Count - 1);
    }
} 
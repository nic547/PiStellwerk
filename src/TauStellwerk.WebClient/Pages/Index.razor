@page "/"
@using TauStellwerk.Client.Services
@using TauStellwerk.Client.Model

@inject ModalManager ModalManager;
@inject ISettingsService SettingsService;
@inject IJSRuntime JsRuntime;

<StopButton />
<ControlContainer />

<SelectionContainer/>
<SettingsModal/>
<EngineEditModal/>
<MessageBoxModal/>

<footer>
    <button class="is-pulled-left button-secondary" id="UsernameLabel" @onclick="() => ModalManager.IsSettingsModalVisible = true" >User: @_settings?.Username</button>
    <button class="is-pulled-right button-secondary" @onclick="() => ModalManager.IsSettingsModalVisible = true" >Settings</button>
</footer>

@code
{
    private ImmutableSettings? _settings;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        SettingsService.SettingsChanged +=async settings =>
        {
            _settings = settings;
            await JsRuntime.InvokeVoidAsync("setTheme", _settings.Theme);
            await SetWakeLock(_settings.WakeLock);

            StateHasChanged();
        };

        _settings = await SettingsService.GetSettings();
        await JsRuntime.InvokeVoidAsync("setTheme", _settings.Theme);
    }

    private async Task SetWakeLock(bool setWakeLock)
    {
        if (setWakeLock)
        {
            await JsRuntime.InvokeVoidAsync("enableWakeLock");
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("disableWakeLock");
        }
    }
}
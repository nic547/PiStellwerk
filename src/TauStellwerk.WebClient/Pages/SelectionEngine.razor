@using TauStellwerk.Client.Services
@using System.Collections.Immutable
@using TauStellwerk.Client.Model

@inject AppState AppState
@inject EngineService EngineService
@inject ModalManager ModalManager

<article class="has-shadow is-flex-vertical">
    <header>@Engine.Name</header>
    <EnginePicture Class="selection-image" Images="Engine.Images" Sizes="Sizes" ImageTimestamp="Engine.ImageTimestamp"/>
    <span class="tags">
        @foreach (var tag in Engine.Tags)
        {
            <button class="button-secondary" @onclick="() => { SetSearchAction.Invoke(tag);}">@tag</button>
        }
    </span>
    <div class="flex-filler"></div>
    <div class="is-flex-horizontal justify-flex-end">
        <button @onclick="EditEngine">Edit</button>
        <button @onclick="ControlEngine">Control</button>
    </div>

</article>
@code {
    private const string Sizes = "(min-width: 800px) 50vw,(min-width: 1300px) 25vw,(min-width: 1800px) 20vw,100vw";

    [EditorRequired]
    [Parameter]
    public EngineOverview Engine { get; init; } = null!;

    [EditorRequired]
    [Parameter]
    public Action<string> SetSearchAction { get; init; } = null!;

    private async void ControlEngine()
    {
        var engine = await EngineService.AcquireEngine(Engine.Id);
        if (engine != null)
        {
            AppState.ActiveEngines.Add(engine);
            ModalManager.IsEngineSelectionVisible = false;
        }
        else
        {
            AppState.ShowMessageBox("Could not acquire engine. It might be in use by someone else");
        }
    }

    private async void EditEngine()
    {
        var engine = await EngineService.AcquireEngine(Engine.Id);
        if (engine != null)
        {
            AppState.SelectedEngine = engine;
            ModalManager.IsEngineEditModalVisible = true;
        }
        else
        {
            AppState.ShowMessageBox("Could not acquire engine. It might be in use by someone else");
        }
    }
}

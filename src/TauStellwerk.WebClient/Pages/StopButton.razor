@using TauStellwerk.Client.Model
@using TauStellwerk.Client.Services
@using TauStellwerk.Base.Model


@inject StatusService StatusService;
@inject ISettingsService SettingsService;


<div id="StopButton" disabled="@_state.ShouldBeDisabled" @onclick="StopButtonClick" class="@_state.CurrentState">
    <span id="StopTitle">@_state.TitleText</span>
    <br />
    <span id="StopDetails">@_state.BottomText</span>
</div>

@code {
    private StopButtonState _state = new();

    protected override void OnInitialized()
    {
        if (StatusService == null)
        {
            throw new InvalidOperationException("No StatusService was provided to StopButton!");
        }

        _state!.PropertyChanged += (_, _) => StateHasChanged();

        StatusService.StatusChanged += s => _state.SetStatus(s);

        if (StatusService.LastKnownStatus != null)
        {
            _state.SetStatus(StatusService.LastKnownStatus);
        }
    }

    private async void StopButtonClick()
    {
        if (_state.CurrentState == StopButtonState.State.StoppedLocked)
        {
            return;
        }
        var isCurrentlyRunning = StatusService.LastKnownStatus?.State;
        var username = (await SettingsService.GetSettings()).Username;
        var status = new SystemStatus()
        {
            State = isCurrentlyRunning == State.Off ? State.On : State.Off,
            LastActionUsername = username,
        };

        await StatusService.SetStatus(status);
    }
}